<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" 
   "http://mybatis.org/dtd/mybatis-3-mapper.dtd">

// ★ 네임스페이스를 'student'로 설정하여 DAO에서 이 이름으로 SQL문을 찾아 실행
<mapper namespace="student">

   /*------------------------------------------------
    * [2] ResultMap 정의
    *------------------------------------------------*/
   // → StudentVO와 데이터베이스 컬럼을 매핑하는 규칙 정의
   <resultMap type="chapter07.StudentVO" id="svo">
       // → grade 컬럼을 VO의 year 속성으로 매핑
       <result column="grade" property="year" />
   </resultMap>

   /*------------------------------------------------
    * [3] 공통 검색 조건 SQL 정의
    *------------------------------------------------*/
   <sql id="whereSql">
       <where>
           // → 검색어가 있는 경우의 조건
           <if test="searchWord != null and searchWord != ''">
               // → 검색 유형이 'all'인 경우
               <if test="searchType == 'all'">
                   id LIKE '%${searchWord}%' OR name LIKE '%${searchWord}%'
               </if>
               // → 특정 필드 검색인 경우
               <if test="searchType != 'all'">
                   ${searchType} LIKE '%${searchWord}%'
               </if>
           </if>
           
           // → 학년으로 검색하는 경우
           <if test="searchGrade > 0">
               AND grade = #{searchGrade}
           </if>
           
           // → 전공으로 검색하는 경우
           <if test="searchMajor != null">
               AND major1 IN
               // → 선택된 전공들을 IN 절로 구성
               <foreach collection="searchMajor" item="m" 
                        open="(" close=")" separator=",">
                   #{m}
               </foreach>
           </if>
       </where>
   </sql>

   /*------------------------------------------------
    * [4] 학생 목록 조회 SQL
    *------------------------------------------------*/
   <select id="list" parameterType="chapter07.StudentVO"
           resultType="chapter07.StudentVO">
       SELECT
           student.studno, 
           student.id, 
           student.name, 
           student.grade,
           // → 서브쿼리로 교수 이름 조회
           (SELECT name FROM professor 
            WHERE no = student.profno) profname
       FROM student
       // → 위에서 정의한 검색 조건 포함
       <include refid="whereSql" />
   </select>

   /*------------------------------------------------
    * [5] 학생 수 조회 SQL
    *------------------------------------------------*/
   <select id="count" parameterType="chapter07.StudentVO"
           resultType="int">
       SELECT COUNT(*) FROM student
       // → 동일한 검색 조건 적용
       <include refid="whereSql" />
   </select>

   /*------------------------------------------------
    * [6] 학생 등록 SQL
    *------------------------------------------------*/
   <insert id="insert" parameterType="chapter07.StudentVO">
       // → 기본 정보 등록
       INSERT INTO student (id, name, grade, jumin)
       VALUES (#{id}, #{name}, #{grade}, #{jumin})
       
       // → 자동 생성된 학번을 VO에 설정
       <selectKey order="AFTER" keyProperty="studno"
                  resultType="int">
           SELECT LAST_INSERT_ID()
       </selectKey>
   </insert>

   /*------------------------------------------------
    * [7] 취미 등록 SQL
    *------------------------------------------------*/
   <insert id="insertHobby" parameterType="chapter07.HobbyVO">
       INSERT INTO hobby (studno, name)
       VALUES (#{studno}, #{name})
   </insert>

</mapper>